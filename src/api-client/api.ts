// tslint:disable
/// <reference path="./custom.d.ts" />
/**
 * Tweetwatch Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.1
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as globalImportUrl from 'url';
import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CreateTopicRequest
 */
export interface CreateTopicRequest {
    /**
     * 
     * @type {string}
     * @memberof CreateTopicRequest
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof CreateTopicRequest
     */
    tracks: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof CreateTopicRequest
     */
    isActive: boolean;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    message: string;
}
/**
 * 
 * @export
 * @interface Topic
 */
export interface Topic {
    /**
     * 
     * @type {number}
     * @memberof Topic
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof Topic
     */
    tracks: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Topic
     */
    createdAt: string;
    /**
     * 
     * @type {boolean}
     * @memberof Topic
     */
    isActive: boolean;
}
/**
 * 
 * @export
 * @interface UserRequest
 */
export interface UserRequest {
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface UserResponse
 */
export interface UserResponse {
    /**
     * 
     * @type {number}
     * @memberof UserResponse
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    email: string;
    /**
     * 
     * @type {string}
     * @memberof UserResponse
     */
    token: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTopicRequest} topic New Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopic(topic: CreateTopicRequest, options: any = {}): RequestArgs {
            // verify required parameter 'topic' is not null or undefined
            if (topic === null || topic === undefined) {
                throw new RequiredError('topic','Required parameter topic was null or undefined when calling createTopic.');
            }
            const localVarPath = `/topics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CreateTopicRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(topic !== undefined ? topic : {}) : (topic || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTopics(options: any = {}): RequestArgs {
            const localVarPath = `/topics`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRequest} user New User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: UserRequest, options: any = {}): RequestArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling login.');
            }
            const localVarPath = `/login`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"UserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {UserRequest} user New User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(user: UserRequest, options: any = {}): RequestArgs {
            // verify required parameter 'user' is not null or undefined
            if (user === null || user === undefined) {
                throw new RequiredError('user','Required parameter user was null or undefined when calling signup.');
            }
            const localVarPath = `/signup`;
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"UserRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(user !== undefined ? user : {}) : (user || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update desired topic by Topic ID
         * @param {number} topicId Numeric ID of the topic to update
         * @param {CreateTopicRequest} topic Updated topic data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopic(topicId: number, topic: CreateTopicRequest, options: any = {}): RequestArgs {
            // verify required parameter 'topicId' is not null or undefined
            if (topicId === null || topicId === undefined) {
                throw new RequiredError('topicId','Required parameter topicId was null or undefined when calling updateTopic.');
            }
            // verify required parameter 'topic' is not null or undefined
            if (topic === null || topic === undefined) {
                throw new RequiredError('topic','Required parameter topic was null or undefined when calling updateTopic.');
            }
            const localVarPath = `/topics/{topicId}`
                .replace(`{${"topicId"}}`, encodeURIComponent(String(topicId)));
            const localVarUrlObj = globalImportUrl.parse(localVarPath, true);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication JWT required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? configuration.apiKey("Authorization")
                    : configuration.apiKey;
                localVarHeaderParameter["Authorization"] = localVarApiKeyValue;
            }


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            localVarUrlObj.query = {...localVarUrlObj.query, ...localVarQueryParameter, ...options.query};
            // fix override query string Detail: https://stackoverflow.com/a/7517673/1077943
            delete localVarUrlObj.search;
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...options.headers};
            const needsSerialization = (<any>"CreateTopicRequest" !== "string") || localVarRequestOptions.headers['Content-Type'] === 'application/json';
            localVarRequestOptions.data =  needsSerialization ? JSON.stringify(topic !== undefined ? topic : {}) : (topic || "");

            return {
                url: globalImportUrl.format(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    return {
        /**
         * 
         * @param {CreateTopicRequest} topic New Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopic(topic: CreateTopicRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).createTopic(topic, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTopics(options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Topic>> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).getUserTopics(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UserRequest} user New User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: UserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).login(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @param {UserRequest} user New User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(user: UserRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<UserResponse> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).signup(user, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * 
         * @summary Update desired topic by Topic ID
         * @param {number} topicId Numeric ID of the topic to update
         * @param {CreateTopicRequest} topic Updated topic data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopic(topicId: number, topic: CreateTopicRequest, options?: any): (axios?: AxiosInstance, basePath?: string) => AxiosPromise<Topic> {
            const localVarAxiosArgs = DefaultApiAxiosParamCreator(configuration).updateTopic(topicId, topic, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * 
         * @param {CreateTopicRequest} topic New Topic
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        createTopic(topic: CreateTopicRequest, options?: any) {
            return DefaultApiFp(configuration).createTopic(topic, options)(axios, basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUserTopics(options?: any) {
            return DefaultApiFp(configuration).getUserTopics(options)(axios, basePath);
        },
        /**
         * 
         * @param {UserRequest} user New User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        login(user: UserRequest, options?: any) {
            return DefaultApiFp(configuration).login(user, options)(axios, basePath);
        },
        /**
         * 
         * @param {UserRequest} user New User
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        signup(user: UserRequest, options?: any) {
            return DefaultApiFp(configuration).signup(user, options)(axios, basePath);
        },
        /**
         * 
         * @summary Update desired topic by Topic ID
         * @param {number} topicId Numeric ID of the topic to update
         * @param {CreateTopicRequest} topic Updated topic data
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateTopic(topicId: number, topic: CreateTopicRequest, options?: any) {
            return DefaultApiFp(configuration).updateTopic(topicId, topic, options)(axios, basePath);
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {CreateTopicRequest} topic New Topic
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public createTopic(topic: CreateTopicRequest, options?: any) {
        return DefaultApiFp(this.configuration).createTopic(topic, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getUserTopics(options?: any) {
        return DefaultApiFp(this.configuration).getUserTopics(options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {UserRequest} user New User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public login(user: UserRequest, options?: any) {
        return DefaultApiFp(this.configuration).login(user, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @param {UserRequest} user New User
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public signup(user: UserRequest, options?: any) {
        return DefaultApiFp(this.configuration).signup(user, options)(this.axios, this.basePath);
    }

    /**
     * 
     * @summary Update desired topic by Topic ID
     * @param {number} topicId Numeric ID of the topic to update
     * @param {CreateTopicRequest} topic Updated topic data
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public updateTopic(topicId: number, topic: CreateTopicRequest, options?: any) {
        return DefaultApiFp(this.configuration).updateTopic(topicId, topic, options)(this.axios, this.basePath);
    }

}


